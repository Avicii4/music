<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="indi.harry.music.mapper.AlbumMapper">
    <resultMap id="BaseResultMap" type="indi.harry.music.entity.Album">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="artist_id" jdbcType="INTEGER" property="artistId"/>
        <result column="genre" jdbcType="VARCHAR" property="genre"/>
        <result column="year" jdbcType="INTEGER" property="year"/>
        <result column="publisher" jdbcType="VARCHAR" property="publisher"/>
    </resultMap>

    <resultMap id="QueryResultMap" type="indi.harry.music.entity.DTO.AlbumInfoDTO">
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="t_name" jdbcType="VARCHAR" property="artistName"/>
        <result column="genre" jdbcType="VARCHAR" property="genre"/>
        <result column="year" jdbcType="VARCHAR" property="year"/>
        <result column="publisher" jdbcType="VARCHAR" property="publisher"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, name, artist_id, genre, year, publisher
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from album
        where id = #{id,jdbcType=INTEGER}
    </select>

    <select id="queryIdByName" parameterType="java.lang.String" resultType="int">
        select id from album
        where name = #{name,jdbcType=VARCHAR}
    </select>

    <select id="query" parameterType="indi.harry.music.entity.DTO.AlbumQueryDTO"
            resultMap="QueryResultMap">
        SELECT
        m.id,
        m.name,
        t.name as t_name,
        m.genre,
        m.year,
        m.publisher
        FROM album m
        LEFT JOIN artist t
        ON m.artist_id = t.id
        <where>
            <if test="dto.id != null">
                m.id = #{dto.id}
            </if>
            <if test="dto.name != null and dto.name != ''">
                AND m.name LIKE CONCAT('%',#{dto.name},'%')
            </if>
            <if test="dto.artistName != null and dto.artistName != ''">
                AND t.name LIKE CONCAT('%',#{dto.artistName},'%')
            </if>
            <if test="dto.genre != null and dto.genre != ''">
                AND m.genre LIKE CONCAT('%',#{dto.genre},'%')
            </if>
            <if test="dto.startYear != null">
                AND m.year &gt;= #{dto.startYear}
            </if>
            <if test="dto.endYear != null">
                AND m.year &lt;= #{dto.endYear}
            </if>
            <if test="dto.publisher != null and dto.publisher !=''">
                AND m.publisher LIKE CONCAT('%',#{dto.publisher},'%')
            </if>
        </where>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from album
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="indi.harry.music.entity.Album">
        insert into album (id, name, artist_id,
        genre, year, publisher
        )
        values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{artistId,jdbcType=INTEGER},
        #{genre,jdbcType=VARCHAR}, #{year,jdbcType=INTEGER}, #{publisher,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="indi.harry.music.entity.Album">
        insert into album
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="artistId != null">
                artist_id,
            </if>
            <if test="genre != null">
                genre,
            </if>
            <if test="year != null">
                year,
            </if>
            <if test="publisher != null">
                publisher,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="artistId != null">
                #{artistId,jdbcType=INTEGER},
            </if>
            <if test="genre != null">
                #{genre,jdbcType=VARCHAR},
            </if>
            <if test="year != null">
                #{year,jdbcType=INTEGER},
            </if>
            <if test="publisher != null">
                #{publisher,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="indi.harry.music.entity.Album">
        update album
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="artistId != null">
                artist_id = #{artistId,jdbcType=INTEGER},
            </if>
            <if test="genre != null">
                genre = #{genre,jdbcType=VARCHAR},
            </if>
            <if test="year != null">
                year = #{year,jdbcType=INTEGER},
            </if>
            <if test="publisher != null">
                publisher = #{publisher,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="indi.harry.music.entity.Album">
        update album
        set name = #{name,jdbcType=VARCHAR},
        artist_id = #{artistId,jdbcType=INTEGER},
        genre = #{genre,jdbcType=VARCHAR},
        year = #{year,jdbcType=INTEGER},
        publisher = #{publisher,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>